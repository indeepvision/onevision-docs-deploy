"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[7450],{876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(t),f=i,d=p["".concat(l,".").concat(f)]||p[f]||u[f]||a;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var m=2;m<a;m++)o[m]=t[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2372:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=t(7896),i=(t(2784),t(876));const a={sidebar_position:3},o="Vision element flat",s={unversionedId:"programming/vision_elements/elements/vision-element-flat-types",id:"programming/vision_elements/elements/vision-element-flat-types",title:"Vision element flat",description:"This is the base class for all vision elements, all will have the functions defined in this class. All other vision elements inherit from this abstract class.",source:"@site/docs/programming/4_vision_elements/2_elements/3-vision-element-flat-types.md",sourceDirName:"programming/4_vision_elements/2_elements",slug:"/programming/vision_elements/elements/vision-element-flat-types",permalink:"/onevision/docs/programming/vision_elements/elements/vision-element-flat-types",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"programmingSidebar",previous:{title:"Vision element types",permalink:"/onevision/docs/programming/vision_elements/elements/vision-element-types"},next:{title:"Boolean",permalink:"/onevision/docs/programming/vision_elements/elements/boolean"}},l={},m=[],c={toc:m},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"vision-element-flat"},"Vision element flat"),(0,i.kt)("p",null,"This is the base class for all vision elements, all will have the functions defined in this class. All other vision elements inherit from this abstract class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"class Image {\n    /** Create an empty invalid image */\n    constructor();\n    /** Create a valid image initialized with zeros */\n    constructor(width: number, height: number, pixelformat: EPixelFormat);\n    /** Create a valid image initialized with external data */\n    constructor(width: number, height: number, pixelformat: EPixelFormat, data: ArrayBuffer);\n\n    pixelformat(): EPixelFormat;\n    width(): number;\n    height(): number;\n    /** Returns the size of the image data in bytes */\n    byteSize(): number;\n    pixelCount(): number;\n    channelCount(): number;\n    bytesPerPixel(): number;\n    bitsPerPixel(): number;\n\n    /** Sets a new frame on the image, will throw if not valid */\n    setFrame(frame: Rect2d): void;\n    /** Returns a copy of the image frame */\n    getFrame(): Rect2d;\n    /** Set frame size equal full image size */\n    resetFrame(): void;\n\n    /** \n     * Returns a copy of the raw data as an array buffer that can be cast into a\n     * data view depending on the underlying type of the image\n     */\n    copyBuffer(): ArrayBuffer;\n\n    /** Approximate size in memory of the object, not the same as the size of the image data */\n    allocatedSize(): number;\n\n    /**\n     * Copies the image data if it is owned, otherwise creates a new image pointing\n     * to the same external data\n     */\n    clone(): Image;\n\n    /** Returns true if the data contained in the image represents a valid image */\n    isValid(): boolean;\n    \n    // Props\n\n    timestamp: number;\n    opacity: number;\n    color: string;\n    colormode: EImageColormode;\n    transparency: EImageTransparency;\n    normalization: EImageNormalization;\n    normalizeMin: number;\n    normalizeMax: number;\n}\n")))}u.isMDXComponent=!0}}]);