"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[9341],{876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var i=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,d=u["".concat(l,".").concat(g)]||u[g]||m[g]||r;return t?i.createElement(d,o(o({ref:n},c),{},{components:t})):i.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(7896),a=(t(2784),t(876));const r={sidebar_position:0},o="Language Rules",s={unversionedId:"programming/language_basics/language-rules",id:"programming/language_basics/language-rules",title:"Language Rules",description:"Programming in OneVision Scripts is very similar to programming in Typescript. The main diference is the use of sequences to control the flow of the program.",source:"@site/docs/programming/2_language_basics/0-language-rules.md",sourceDirName:"programming/2_language_basics",slug:"/programming/language_basics/language-rules",permalink:"/onevision/docs/programming/language_basics/language-rules",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"programmingSidebar",previous:{title:"Language basics",permalink:"/onevision/docs/category/language-basics"},next:{title:"Variables",permalink:"/onevision/docs/programming/language_basics/variables"}},l={},p=[{value:"Sequences",id:"sequences",level:2},{value:"Terminating statement",id:"terminating-statement",level:2},{value:"Comments",id:"comments",level:2},{value:"Single-Line Comments",id:"single-line-comments",level:3},{value:"Multi-Line Comments",id:"multi-line-comments",level:3},{value:"Adding descriptions to definitions",id:"adding-descriptions-to-definitions",level:3}],c={toc:p},u="wrapper";function m(e){let{components:n,...r}=e;return(0,a.kt)(u,(0,i.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"language-rules"},"Language Rules"),(0,a.kt)("p",null,"Programming in OneVision Scripts is very similar to programming in Typescript. The main diference is the use of sequences to control the flow of the program. "),(0,a.kt)("h2",{id:"sequences"},"Sequences"),(0,a.kt)("p",null,"Sequences encompass all the code executed during the runtime of your application. They allow you to define instructions for the program to perform or events to handle."),(0,a.kt)("p",null,"There are four types of sequences: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Init Sequences:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Purpose:")," Init sequences execute once at the beginning of the application."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Usage:")," These sequences are ideal for initializing configuration variables, preparing modules, or setting up essential resources needed throughout the application's lifespan."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Example Use:")," Initializing libraries, loading initial data, setting up environment configurations."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Simple Sequences:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Purpose:")," Simple sequences execute immediately after the init sequences."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Usage:")," They are used for one-time operations that do not need to repeat during runtime or using loops to create cyclic executions manually. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Example Use:")," Performing initial image processing tasks, setting up initial UI components or define cyclic sequence with more control of the execution frequency."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Cyclic Sequences:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Purpose:")," Cyclic sequences execute repeatedly in a loop after the init sequences."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Usage:")," They are employed for continuous tasks such as real-time processing, ongoing monitoring, or iterative operations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Example Use:")," Real-time video analysis, continuous data acquisition and processing."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"End Sequences:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Purpose:")," End sequences execute at the conclusion of the runtime."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Usage:")," They handle final operations, clean-up tasks, or logging before the application terminates."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Example Use:")," Saving results, closing connections, releasing resources.")))),(0,a.kt)("p",null,"To create a sequence you just have to add and define a name and the type of sequence: "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:t(5063).Z,width:"496",height:"254"})),(0,a.kt)("h2",{id:"terminating-statement"},"Terminating statement"),(0,a.kt)("p",null,"In your custom programming language designed for computer vision applications, ensuring clarity and consistency in coding practices is crucial. One important rule to follow in OneVision Scripts is that all instructions should end with a semicolon (;). This rule helps the compiler parse the code correctly and prevents ambiguity in statements."),(0,a.kt)("p",null,"For example: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Correct instructions\nvar age: number = 30; \nvar name: string = "Alice"; \nvar isStudent: boolean = true; \n\n// Incorrect instruction\nvar day: number = 30\n')),(0,a.kt)("h2",{id:"comments"},"Comments"),(0,a.kt)("p",null,"In OneVision Scripts, comments serve the same purpose as they do in Typescript and other programming languages: they are non-executable text that you can include within your code to explain, clarify, or document different aspects of your codebase. TypeScript supports both single-line and multi-line comments. Here\u2019s how comments work in OneVision:"),(0,a.kt)("h3",{id:"single-line-comments"},"Single-Line Comments"),(0,a.kt)("p",null,"Single-line comments start with ",(0,a.kt)("inlineCode",{parentName:"p"},"//")," and continue until the end of the line. They are commonly used for brief explanations or annotations on a single line of code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// This is a single-line comment\nvar message: string = "Hello, OneVision!";\n')),(0,a.kt)("h3",{id:"multi-line-comments"},"Multi-Line Comments"),(0,a.kt)("p",null,"Multi-line comments, also known as block comments, begin with ",(0,a.kt)("inlineCode",{parentName:"p"},"/**")," and end with ",(0,a.kt)("inlineCode",{parentName:"p"},"*/"),". They can span multiple lines and are typically used for longer explanations or comments that cover multiple lines of code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"/*\n  This is a multi-line comment.\n  It can span multiple lines and is useful for longer explanations.\n*/\nvar numberArray: number[] = [1, 2, 3, 4, 5];\n")),(0,a.kt)("h3",{id:"adding-descriptions-to-definitions"},"Adding descriptions to definitions"),(0,a.kt)("p",null,"Multi-line comments used right before a variable declaration can be used to add some description to the created element. In OneVision, hovering a variable will show the description defined for that variable. "),(0,a.kt)("p",null,"For example: "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:t(6259).Z,width:"581",height:"315"})))}m.isMDXComponent=!0},6259:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/add-description-variable_70-ecd5eb45c79ffb76e94b0a6d457191b5.png"},5063:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/add-sequence_70-eddf9ab87d7f73f329ee51fe0332290b.png"}}]);