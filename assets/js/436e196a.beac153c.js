"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[8557],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,y=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(y,l(l({ref:t},p),{},{components:n})):a.createElement(y,l({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(7896),r=(n(2784),n(876));const i={sidebar_position:2},l="Arrays",o={unversionedId:"programming/language_basics/arrays",id:"programming/language_basics/arrays",title:"Arrays",description:"In OneVision Scripts, arrays are used to store collections of elements. They are intended to hold elements of the same type, but you could also store multiple types using the any type . Here\u2019s how you define arrays in OneVision:",source:"@site/docs/programming/2_language_basics/2-arrays.md",sourceDirName:"programming/2_language_basics",slug:"/programming/language_basics/arrays",permalink:"/onevision/docs/programming/language_basics/arrays",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"programmingSidebar",previous:{title:"Variables",permalink:"/onevision/docs/programming/language_basics/variables"},next:{title:"Dictionaries",permalink:"/onevision/docs/programming/language_basics/dictionaries"}},s={},d=[{value:"Array Declaration",id:"array-declaration",level:3},{value:"Array Initialization",id:"array-initialization",level:3},{value:"Accessing Array Elements",id:"accessing-array-elements",level:3},{value:"Nested arrays",id:"nested-arrays",level:3},{value:"Array Methods and Properties",id:"array-methods-and-properties",level:3},{value:"Array Properties",id:"array-properties",level:4},{value:"Mutator Methods",id:"mutator-methods",level:4},{value:"Accessor Methods",id:"accessor-methods",level:4}],p={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"arrays"},"Arrays"),(0,r.kt)("p",null,"In OneVision Scripts, arrays are used to store collections of elements. They are intended to hold elements of the same type, but you could also store multiple types using the ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," type . Here\u2019s how you define arrays in OneVision:"),(0,r.kt)("h3",{id:"array-declaration"},"Array Declaration"),(0,r.kt)("p",null,"You can declare an array by specifying the type of elements it will hold followed by ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Array of numbers\nvar numbers: number[] = [];\n\n// Array of strings\nvar fruits: string[] = [];\n\n// Array of mixed types\nvar mixedArray: any[] = [1, "Hello", true]; \n')),(0,r.kt)("h3",{id:"array-initialization"},"Array Initialization"),(0,r.kt)("p",null,"Arrays can be initialized with elements enclosed in square brackets ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'var numbers: number[] = [1, 2, 3, 4, 5];\nvar fruits: string[] = ["Apple", "Banana", "Cherry"];\n')),(0,r.kt)("p",null,"As it was explained, OneVision can infer the type in most cases when the initial value has a unique type: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Array of numbers\nvar numbers = [1, 2, 3, 4, 5]; // variable numbers is initialized with number[] type\n\n// Array of strings\nvar fruits = ["Apple", "Banana", "Cherry"]; // variable fruits is initialized with string[] type\n')),(0,r.kt)("h3",{id:"accessing-array-elements"},"Accessing Array Elements"),(0,r.kt)("p",null,"You can access elements of an array using their zero-based index:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'var fruits: string[] = ["Apple", "Banana", "Cherry"];\n\nfruits[0]; // Output: "Apple"\nfruits[1]; // Output: "Banana"\nfruits[2]; // Output: "Cherry"\n')),(0,r.kt)("h3",{id:"nested-arrays"},"Nested arrays"),(0,r.kt)("p",null,"Nested arrays, also known as multidimensional arrays, are arrays that contain other arrays as their elements. These are useful for representing complex data structures like matrices, grids, or any data that naturally fits into a table-like format."),(0,r.kt)("p",null,"You can easily define nested arrays as: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"var matrix: number[][]= [[1,2,3], [4,5,6], [7,8,9]]; \nvar value = matrix[1][2];  // value = 6\n")),(0,r.kt)("h3",{id:"array-methods-and-properties"},"Array Methods and Properties"),(0,r.kt)("p",null,"Arrays in OneVision are very similar to Typescript and come with built-in methods and properties for manipulating and accessing their elements. Some common methods include ",(0,r.kt)("inlineCode",{parentName:"p"},"push"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pop"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"splice"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"concat"),", etc."),(0,r.kt)("h4",{id:"array-properties"},"Array Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Returned Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"length")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns or sets the number of elements in an array."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"mutator-methods"},"Mutator Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Returned Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"push(item: T): number")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds one element to the end of the array and returns the new length."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pop(): T \\| undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"Removes the last element from the array and returns it, or ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if the array is empty."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T \\| undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shift(): T \\| undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"Removes the first element from the array and returns it, or ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if the array is empty."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T \\| undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unshift(item: T): number")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds one element to the beginning of the array and returns the new length."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"splice(start: number, deleteCount: number): T[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Changes the contents of an array by removing existing elements returning the deleted elements"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sort(): this")),(0,r.kt)("td",{parentName:"tr",align:null},"Sorts the elements of an array in place and returns the array."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"this"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"reverse(): T[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Reverses the order of the elements in the array in place and returns the array."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T[]"))))),(0,r.kt)("h4",{id:"accessor-methods"},"Accessor Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Returned Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"concat(items: T[]): T[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns a new array that is a shallow copy of the original array with additional elements concatenated."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"includes(searchElement: T, fromIndex?: number): boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether an array includes a certain element, returning ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," as appropriate."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"slice(start: number, end?: number): T[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns a shallow copy of a portion of an array into a new array object selected from ",(0,r.kt)("inlineCode",{parentName:"td"},"start")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"end")," (",(0,r.kt)("inlineCode",{parentName:"td"},"end")," not included)."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"toString(): string")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns a string representing the specified array and its elements."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))))))}u.isMDXComponent=!0}}]);