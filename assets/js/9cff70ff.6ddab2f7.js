"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[5547],{876:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>d});var t=a(2784);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=t.createContext({}),c=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},s=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},v=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(a),v=o,d=u["".concat(p,".").concat(v)]||u[v]||m[v]||r;return a?t.createElement(d,i(i({ref:n},s),{},{components:a})):t.createElement(d,i({ref:n},s))}));function d(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=v;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}v.displayName="MDXCreateElement"},135:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(7896),o=(a(2784),a(876));const r={sidebar_position:1},i="Compare",l={unversionedId:"programming/vision_elements/basics/compare",id:"programming/vision_elements/basics/compare",title:"Compare",description:"Functions to compare vision elements.",source:"@site/docs/programming/4_vision_elements/1_basics/1-compare.md",sourceDirName:"programming/4_vision_elements/1_basics",slug:"/programming/vision_elements/basics/compare",permalink:"/onevision/docs/programming/vision_elements/basics/compare",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"programmingSidebar",previous:{title:"Basics",permalink:"/onevision/docs/category/basics"},next:{title:"Containers",permalink:"/onevision/docs/programming/vision_elements/basics/containers"}},p={},c=[{value:"<code>isEquivalentPath2d()</code>",id:"isequivalentpath2d",level:3},{value:"<code>compareValueBoolean()</code>",id:"comparevalueboolean",level:3},{value:"<code>compareValueNumber()</code>",id:"comparevaluenumber",level:3},{value:"<code>compareValueString()</code>",id:"comparevaluestring",level:3},{value:"<code>compareValueProbability()</code>",id:"comparevalueprobability",level:3},{value:"<code>compareValuePoint()</code>",id:"comparevaluepoint",level:3},{value:"<code>compareValueSegment()</code>",id:"comparevaluesegment",level:3},{value:"<code>compareValueLine()</code>",id:"comparevalueline",level:3},{value:"<code>compareValueRect()</code>",id:"comparevaluerect",level:3},{value:"<code>compareValueEllipse()</code>",id:"comparevalueellipse",level:3},{value:"<code>compareValuePath()</code>",id:"comparevaluepath",level:3},{value:"<code>compareValueShape()</code>",id:"comparevalueshape",level:3},{value:"<code>compareValueImage()</code>",id:"comparevalueimage",level:3}],s={toc:c},u="wrapper";function m(e){let{components:n,...a}=e;return(0,o.kt)(u,(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"compare"},"Compare"),(0,o.kt)("p",null,"Functions to compare vision elements."),(0,o.kt)("h3",{id:"isequivalentpath2d"},(0,o.kt)("inlineCode",{parentName:"h3"},"isEquivalentPath2d()")),(0,o.kt)("p",null,"Returns true if paths have the same set of consecutive points, but not necessarily the same starting point, and are closed paths."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function isEquivalentPath2d(path1: Path2d, path2: Path2): boolean;\n")),(0,o.kt)("h3",{id:"comparevalueboolean"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueBoolean()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueBoolean(boolean1: Boolean, boolean2: Boolean): boolean;\n")),(0,o.kt)("h3",{id:"comparevaluenumber"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueNumber()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueNumber(number1: Number, number2: Number): boolean;\n")),(0,o.kt)("h3",{id:"comparevaluestring"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueString()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueString(string1: String, string2: String): boolean;\n")),(0,o.kt)("h3",{id:"comparevalueprobability"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueProbability()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueProbability(probability1: Probability, probability2: Probability): boolean;\n")),(0,o.kt)("h3",{id:"comparevaluepoint"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValuePoint()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValuePoint(point1: Point2d, point2: Point2d): boolean;\n")),(0,o.kt)("h3",{id:"comparevaluesegment"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueSegment()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueSegment(segment1: Segment2d, segment2: Segment2d): boolean;\n")),(0,o.kt)("h3",{id:"comparevalueline"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueLine()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueLine(line1: Line2d, line2: Line2d): boolean;\n")),(0,o.kt)("h3",{id:"comparevaluerect"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueRect()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueRect(rect1: Rect2d, rect2: Rect2d): boolean;\n")),(0,o.kt)("h3",{id:"comparevalueellipse"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueEllipse()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueEllipse(ellipse1: Ellipse2d, ellipse2: Ellipse2d): boolean;\n")),(0,o.kt)("h3",{id:"comparevaluepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValuePath()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValuePath(path1: Path2d, path2: Path2d): boolean;\n")),(0,o.kt)("h3",{id:"comparevalueshape"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueShape()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueShape(shape1: Shape2d, shape2: Shape2d): boolean;\n")),(0,o.kt)("h3",{id:"comparevalueimage"},(0,o.kt)("inlineCode",{parentName:"h3"},"compareValueImage()")),(0,o.kt)("p",null,"Returns true if the value part of the vision elements are the same. The props of the vision element are not taken into account. The value of the image is completely compared, including: width, height, pixel format, and pixel data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-onevision"},"function compareValueImage(image1: Image, image2: Image): boolean;\n")))}m.isMDXComponent=!0}}]);