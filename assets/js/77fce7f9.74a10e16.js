"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[570],{876:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(2784);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),g=a,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return r?t.createElement(m,i(i({ref:n},p),{},{components:r})):t.createElement(m,i({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9387:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=r(7896),a=(r(2784),r(876));const o={sidebar_position:7},i="Exception handling",c={unversionedId:"programming/language_basics/exception-handling",id:"programming/language_basics/exception-handling",title:"Exception handling",description:"Error handling in OneVision Scripts is essential for building robust and reliable computer vision applications. It ensures that your program can gracefully handle unexpected issues and continue operating or provide meaningful feedback to the user. Error handling is particularly important in computer vision applications where operations such as image processing, data analysis, and hardware interaction can encounter various issues. Proper error handling ensures the application can manage these scenarios gracefully.",source:"@site/docs/programming/2_language_basics/7-exception-handling.md",sourceDirName:"programming/2_language_basics",slug:"/programming/language_basics/exception-handling",permalink:"/onevision/docs/programming/language_basics/exception-handling",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"programmingSidebar",previous:{title:"Function blocks",permalink:"/onevision/docs/programming/language_basics/function-blocks"},next:{title:"Programming Guidelines",permalink:"/onevision/docs/programming/language_basics/programming-style"}},s={},l=[{value:"Try-Catch Blocks",id:"try-catch-blocks",level:3},{value:"The Error Object",id:"the-error-object",level:3}],p={toc:l},u="wrapper";function d(e){let{components:n,...r}=e;return(0,a.kt)(u,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"exception-handling"},"Exception handling"),(0,a.kt)("p",null,"Error handling in OneVision Scripts is essential for building robust and reliable computer vision applications. It ensures that your program can gracefully handle unexpected issues and continue operating or provide meaningful feedback to the user. Error handling is particularly important in computer vision applications where operations such as image processing, data analysis, and hardware interaction can encounter various issues. Proper error handling ensures the application can manage these scenarios gracefully."),(0,a.kt)("h3",{id:"try-catch-blocks"},"Try-Catch Blocks"),(0,a.kt)("p",null,"OneVision Scripts use try-catch blocks to handle exceptions, similar to many other programming languages like JavaScript and TypeScript. The ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," block contains the code that may throw an exception, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," block handles the exception."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n    // Code that may throw an exception\n} catch (error) {\n    // Code to handle the exception\n}\n")),(0,a.kt)("p",null,"For example: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'function divide(a: number, b: number): number {\n    try {\n    let result = divide(10, 0);\n    return result;\n    } catch (error) {\n        console.log("An error occurred: " + error.message);\n        return 0;\n    }\n}\n\n')),(0,a.kt)("h3",{id:"the-error-object"},"The Error Object"),(0,a.kt)("p",null,"When an error occurs in a try block, an ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," object is created and passed to the catch block. This ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," object contains useful information about the error that occurred, such as the error message and name."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Properties of the Error Object:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message"),": A description of the error."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name"),': The name of the error. This is usually "Error" but can be customized for different error types.')))}d.isMDXComponent=!0}}]);