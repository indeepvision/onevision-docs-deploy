"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[6144],{876:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>g});var n=t(2784);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),p=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,g=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return t?n.createElement(g,l(l({ref:a},c),{},{components:t})):n.createElement(g,l({ref:a},c))}));function g(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3833:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=t(7896),r=(t(2784),t(876));const i={sidebar_position:1},l="Variables",s={unversionedId:"programming/language_basics/variables",id:"programming/language_basics/variables",title:"Variables",description:'A variable is like a container that holds a value. You can give this container a name, and then you can use the name to refer to the value stored inside it OneVision Scripts, like Typescript, builds on JavaScript by adding a feature called "static typing," which makes it easier to write safe and error-free code. Let\'s explore the basics of variables in OneVision, step-by-step.',source:"@site/docs/programming/2_language_basics/1-variables.md",sourceDirName:"programming/2_language_basics",slug:"/programming/language_basics/variables",permalink:"/onevision/docs/programming/language_basics/variables",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"programmingSidebar",previous:{title:"Language Rules",permalink:"/onevision/docs/programming/language_basics/language-rules"},next:{title:"Arrays",permalink:"/onevision/docs/programming/language_basics/arrays"}},o={},p=[{value:"Declaring Variables",id:"declaring-variables",level:3},{value:"Adding Types to Variables",id:"adding-types-to-variables",level:3},{value:"Type Inference",id:"type-inference",level:3},{value:"The <code>any</code> Type",id:"the-any-type",level:3},{value:"Constant Variables with <code>const</code>",id:"constant-variables-with-const",level:3},{value:"Arrays and Types",id:"arrays-and-types",level:3},{value:"Type Assertions",id:"type-assertions",level:3},{value:"Global variables",id:"global-variables",level:3},{value:"Variable types",id:"variable-types",level:3}],c={toc:p},d="wrapper";function u(e){let{components:a,...t}=e;return(0,r.kt)(d,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"variables"},"Variables"),(0,r.kt)("p",null,'A variable is like a container that holds a value. You can give this container a name, and then you can use the name to refer to the value stored inside it OneVision Scripts, like Typescript, builds on JavaScript by adding a feature called "static typing," which makes it easier to write safe and error-free code. Let\'s explore the basics of variables in OneVision, step-by-step.'),(0,r.kt)("h3",{id:"declaring-variables"},"Declaring Variables"),(0,r.kt)("p",null,"In OneVision Scripts, you can declare variables using three keywords: ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"global"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"var")),": Declares a variable that can be used throughout the entire scope it\u2019s declared in."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"global")),": Adding global to the variable defintion makes the it usable in all sequences. This means that it can be read or modified in any sequence, function or block."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"const")),": Adding const to the variable definition makes it read only. This means the variable cannot be modified anywere in the code. This is specially useful to define configuration parameters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"pglobal")),": Adding pglobal to the variable definition makes the variable permanent global. This means it is a global variable that will keep the value after stopping the runtime. ")),(0,r.kt)("p",null,"Here's how you use them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"var x = 5; \nglobal var y = 10; \nconst var z = 15; \nconst global var t = 23\npglobal var s = 23 \n")),(0,r.kt)("h3",{id:"adding-types-to-variables"},"Adding Types to Variables"),(0,r.kt)("p",null,'OneVision Scripts allows you to specify what type of data a variable will hold. This is called a "type annotation."'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'var age: number = 30; // age must be a number\nvar name: string = "Alice"; // name must be a string\nvar isStudent: boolean = true; // isStudent must be a boolean (true or false)\n')),(0,r.kt)("h3",{id:"type-inference"},"Type Inference"),(0,r.kt)("p",null,'OneVision Scripts is smart and can guess the type of a variable based on the value you give it. This is called "type inference."'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"var city = \"Barcelona\"; // OneVision knows 'city' is a string\nvar score = 100; // OneVision knows 'score' is a number\n")),(0,r.kt)("p",null,"You don't always need to explicitly state the type if OneVision can infer it."),(0,r.kt)("h3",{id:"the-any-type"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"any")," Type"),(0,r.kt)("p",null,"If you\u2019re not sure what type a variable should be, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),". This tells TypeScript to allow any type of value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"var anything: any = \"Hello\";\nanything = 42; // now 'anything' is a number\nanything = true; // now 'anything' is a boolean\n")),(0,r.kt)("h3",{id:"constant-variables-with-const"},"Constant Variables with ",(0,r.kt)("inlineCode",{parentName:"h3"},"const")),(0,r.kt)("p",null,"When you declare a variable with ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", it means the value cannot be changed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const var pi = 3.14; // pi is a constant and cannot be changed\n// pi = 3.15; // Error: Cannot assign to 'pi' because it is a constant.\n")),(0,r.kt)("h3",{id:"arrays-and-types"},"Arrays and Types"),(0,r.kt)("p",null,"You can also declare arrays with a specific type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'var scores: number[] = [90, 85, 88]; // array of numbers\nvar players: string[] = ["Maqsood Ahmed", "Gogi Alauddin", "Ibrahim Amin"]; // array of strings\n')),(0,r.kt)("p",null,"OneVision can infer the type of arrays as well. However, you cannot declare a variable with an empty array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"var scores = [90, 85, 88]; // OneVision knows the variable scores will contain a list of numbers\n// var players = []; // Error: Cannot use an empty list to initialize a variable.\n")),(0,r.kt)("h3",{id:"type-assertions"},"Type Assertions"),(0,r.kt)("p",null,'Sometimes you know more about the type of a variable than OneVision does. You can use "type assertions" to tell TypeScript the type you know it should be.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'var someValue: any = "this is a string";\nvar strValue: string = someValue as string;\n')),(0,r.kt)("h3",{id:"global-variables"},"Global variables"),(0,r.kt)("p",null,"When defining a global variable, the initialization of that variable is done before any sequence is executed. This means that a global variable defined in any sequence could be used in init sequences with its definition value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'global var parameter: string = "parameter"; // This is initialized before any sequence is running\n')),(0,r.kt)("p",null,"Permanent global variables are only initialized once when they are still undefined. After they are initialized, the value of permanent variables is kept and can be used anywhere in the code."),(0,r.kt)("h3",{id:"variable-types"},"Variable types"),(0,r.kt)("p",null,"Variables may hold values that have different data types:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Represents numeric values. This includes integers and floating-point numbers."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"var num = 42;"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Represents textual data. Strings are sequences of characters enclosed in single or double quotes."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'var str = "Hello, world!";'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Represents logical values. There are only two possible values: ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"var isTrue = true;"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},"Represents ordered collections of values. Can contain multiple values in a single reference."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"var arr = [1, 2, 3, 4, 5];"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},"Represents more complex items. Objects can have different methods and properties just like Typescript."),(0,r.kt)("td",{parentName:"tr",align:null})))))}u.isMDXComponent=!0}}]);