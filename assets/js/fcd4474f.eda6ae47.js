"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[320],{876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>v});var o=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=o.createContext({}),d=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=d(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),u=i,v=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return t?o.createElement(v,a(a({ref:n},p),{},{components:t})):o.createElement(v,a({ref:n},p))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<r;d++)a[d]=t[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=t(7896),i=(t(2784),t(876));const r={sidebar_position:18},a="Path2d",l={unversionedId:"programming/vision_elements/elements/path2d",id:"programming/vision_elements/elements/path2d",title:"Path2d",description:"The Path2d class describes a series of points in a plane, that are connected by straight lines. It can be either open or closed. It is derived from the VisionElement base class.",source:"@site/docs/programming/4_vision_elements/2_elements/18-path2d.md",sourceDirName:"programming/4_vision_elements/2_elements",slug:"/programming/vision_elements/elements/path2d",permalink:"/onevision/docs/programming/vision_elements/elements/path2d",draft:!1,tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"programmingSidebar",previous:{title:"Number",permalink:"/onevision/docs/programming/vision_elements/elements/number"},next:{title:"Point2d",permalink:"/onevision/docs/programming/vision_elements/elements/point2d"}},s={},d=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>addPoints()</code>",id:"addpoints",level:3},{value:"<code>addPoint()</code>",id:"addpoint",level:3},{value:"<code>insertPoint()</code>",id:"insertpoint",level:3},{value:"<code>getPoint()</code>",id:"getpoint",level:3},{value:"<code>getPoints()</code>",id:"getpoints",level:3},{value:"<code>removePoints()</code>",id:"removepoints",level:3},{value:"<code>removePoint()</code>",id:"removepoint",level:3},{value:"<code>numPoints()</code>",id:"numpoints",level:3},{value:"Props",id:"props",level:2},{value:"<code>color</code>",id:"color",level:3},{value:"<code>filled</code>",id:"filled",level:3}],p={toc:d},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"path2d"},"Path2d"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"Path2d")," class describes a series of points in a plane, that are connected by straight lines. It can be either open or closed. It is derived from the ",(0,i.kt)("a",{parentName:"p",href:"./vision-element"},"VisionElement")," base class."),(0,i.kt)("h2",{id:"constructors"},"Constructors"),(0,i.kt)("p",null,"Empty constructor."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"new Path2d(): Path2d;\n")),(0,i.kt)("p",null,"Constructor with the list of points and an optional flag indicating if the path is closed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"new Path2d(points: Point2d[], closed?: boolean): Path2d;\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"addpoints"},(0,i.kt)("inlineCode",{parentName:"h3"},"addPoints()")),(0,i.kt)("p",null,"Appends a list of points at the end of the current list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"addPoints(points: Point2d[]): void;\n")),(0,i.kt)("h3",{id:"addpoint"},(0,i.kt)("inlineCode",{parentName:"h3"},"addPoint()")),(0,i.kt)("p",null,"Appends a point at the end of the current list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"addPoint(point: Point2d): void;\n")),(0,i.kt)("h3",{id:"insertpoint"},(0,i.kt)("inlineCode",{parentName:"h3"},"insertPoint()")),(0,i.kt)("p",null,"Try to insert a point at the given index. If index is out of bounds throws exception. Index -1, appends at the end."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"insertPoint(point: Point2d, index?: number): void; \n")),(0,i.kt)("h3",{id:"getpoint"},(0,i.kt)("inlineCode",{parentName:"h3"},"getPoint()")),(0,i.kt)("p",null,"Get the point at the given index. If index is out of bounds throws exception."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"getPoint(index: number): Point2d; \n")),(0,i.kt)("h3",{id:"getpoints"},(0,i.kt)("inlineCode",{parentName:"h3"},"getPoints()")),(0,i.kt)("p",null,"Get the list of points."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"getPoints(): Point2d[];\n")),(0,i.kt)("h3",{id:"removepoints"},(0,i.kt)("inlineCode",{parentName:"h3"},"removePoints()")),(0,i.kt)("p",null,"Clears the list of points."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"removePoints(): void;\n")),(0,i.kt)("h3",{id:"removepoint"},(0,i.kt)("inlineCode",{parentName:"h3"},"removePoint()")),(0,i.kt)("p",null,"Try to remove a point in the given index. If index  is out of bounds throws exception."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"removePoint(index: number): void; \n")),(0,i.kt)("h3",{id:"numpoints"},(0,i.kt)("inlineCode",{parentName:"h3"},"numPoints()")),(0,i.kt)("p",null,"Returns number of points."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"numPoints(): number;\n")),(0,i.kt)("h2",{id:"props"},"Props"),(0,i.kt)("h3",{id:"color"},(0,i.kt)("inlineCode",{parentName:"h3"},"color")),(0,i.kt)("p",null,"The color of the line in hexadecimal format."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"color: string;\n")),(0,i.kt)("h3",{id:"filled"},(0,i.kt)("inlineCode",{parentName:"h3"},"filled")),(0,i.kt)("p",null,"If true, the path will be filled with the color if it is closed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-onevision"},"filled: string;\n")))}m.isMDXComponent=!0}}]);